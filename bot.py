import telebot
import threading
import pickle
import nltk
import json
import os

from datetime import datetime
from langdetect.lang_detect_exception import LangDetectException

from templates import *
from configure import *
from database import Database
from ModelLibrary.predict import GetToxicity

print("\n" + "Program started" + "\n")

nltk.download('punkt')
nltk.download('stopwords')
db = Database('db.db')
client = telebot.TeleBot(config['token'])
lock = threading.Lock()
rating = {}
last_dialogs = {}
db.restart()

with open("ModelLibrary/models/EnglishModel.bf", "rb") as EnglishModel, \
        open("ModelLibrary/models/RussianModel.bf", "rb") as RussianModel, \
        open("ModelLibrary/models/RussianVectorizer.bf", "rb") as RussianVectorizer, \
        open("ModelLibrary/models/EnglishVectorizer.bf", "rb") as EnglishVectorizer:
    models_ = [pickle.load(RussianModel), pickle.load(EnglishModel)]
    vectorizers_ = [pickle.load(RussianVectorizer), pickle.load(EnglishVectorizer)]

print("Bot connected")


@ignore_exceptions
@client.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–Ø –ø–∞—Ä–µ–Ω—å'), types.KeyboardButton('–Ø –¥–µ–≤—É—à–∫–∞'))
    client.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! '
                                         f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!'
                                         '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª. ü§ñ', reply_markup=markup)


@ignore_exceptions
@client.message_handler(commands=["set_rating"])
def set_rating(message):
    if message.chat.id in [453169809, 1021375877]:  # –∞–¥–º–∏–Ω—ã > –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏
        if len(message.text.split()) == 2:
            db.set_rating(message.chat.id, int(message.text.split()[1]))
        else:
            chat_info = db.get_active_chat(message.chat.id)
            if chat_info is not False:
                db.set_rating(chat_info[1], int(message.text.split()[1]))


@ignore_exceptions
@client.message_handler(commands=['help'])
def __help(message):
    client.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! '
                                         f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!'
                                         '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª. ü§ñ', reply_markup=main_menu())


@ignore_exceptions
@client.message_handler(commands=['menu'])
def menu(message):
    client.send_message(message.chat.id, '¬∑¬∑¬∑–ú–ï–ù–Æ¬∑¬∑¬∑\n'
                                         '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –í–∞–º):\n'
                                         f'–ò–º—è: {message.from_user.first_name}\n'
                                         f'–ü–æ–ª: {db.get_gender(message.chat.id, True)}\n'
                                         f'–†–µ–π—Ç–∏–Ω–≥: {db.get_rating(message.chat.id)[0]:.4f}\n'
                                         f'/help - –ø–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ ü§ñ', reply_markup=next_dialog())


@ignore_exceptions
@client.message_handler(commands=['stop'])
def stop(message):
    chat_info = db.get_active_chat(message.chat.id)

    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.row(types.InlineKeyboardButton(text='üí©–°–ø–∞–ºüí©', callback_data='spam'),
                 types.InlineKeyboardButton(text='ü§•–û–±–º–∞–Ωü§•', callback_data='deceit'))
    keyboard.row(types.InlineKeyboardButton(text='üí∏–ü—Ä–æ–¥–∞–∂–∞üí∏', callback_data='sale'),
                 types.InlineKeyboardButton(text='üîû18+üîû', callback_data='NSFW'))
    keyboard.row(types.InlineKeyboardButton(text='üîé–°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫üîé', callback_data='search'))

    if chat_info is not False:
        db.delete_chat(chat_info[0])

        client.send_message(chat_info[1], 'ü§ñ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –≤–∞—à–µ–≥–æ '
                                          '—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:',
                            reply_markup=keyboard)
        client.send_message(message.chat.id, 'ü§ñ –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:',
                            reply_markup=keyboard)

        db.change_rating(message.chat.id, rating[str(message.chat.id)])
        db.change_rating(chat_info[1], rating[str(chat_info[1])])

        del rating[str(message.chat.id)]
        del rating[str(chat_info[1])]
    else:
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup2.add(types.KeyboardButton('–ü–∞—Ä–µ–Ω—åüôç‚Äç‚ôÇ'),
                    types.KeyboardButton('–î–µ–≤—É—à–∫–∞üôç‚Äç‚ôÄ'),
                    types.KeyboardButton('–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Öüé≤'))
        client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ',
                            reply_markup=markup2)


@ignore_exceptions
@client.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if not db.is_register(message.chat.id) or message.text in ['–Ø –ø–∞—Ä–µ–Ω—å', '–Ø –¥–µ–≤—É—à–∫–∞']:
            if message.text == '–Ø –ø–∞—Ä–µ–Ω—å':
                if db.set_gender(message.chat.id, 'male'):
                    client.send_message(message.chat.id, '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ü§ñ', reply_markup=main_menu())
                else:
                    client.send_message(message.chat.id, '–í—ã —É–∂–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @dfilinov8\n'
                                                         '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ /menu ü§ñ')
            elif message.text == '–Ø –¥–µ–≤—É—à–∫–∞':
                if db.set_gender(message.chat.id, 'female'):
                    client.send_message(message.chat.id, '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!ü§ñ', reply_markup=main_menu())
                else:
                    client.send_message(message.chat.id, '–í—ã —É–∂–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @dfilinov8\n'
                                                         '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ /menuü§ñ')
            else:
                client.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!ü§ñ')
        else:
            chat_info = db.get_active_chat(message.chat.id)
            if chat_info is False and message.text not in ['–°–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å']:
                if message.text == 'üîé–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîé' or message.text == 'üîé–°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫üîé':
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton('–ü–∞—Ä–µ–Ω—åüôç‚Äç‚ôÇ'),
                               types.KeyboardButton('–î–µ–≤—É—à–∫–∞üôç‚Äç‚ôÄ'),
                               types.KeyboardButton('–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Öüé≤'))

                    client.send_message(message.from_user.id, '–ö–æ–≥–æ –∏—Å–∫–∞—Ç—å? ü§ñ', reply_markup=markup)

                elif message.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
                    db.delete_queue(message.chat.id)
                    client.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n'
                                                         '¬∑ –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é\n'
                                                         '¬∑ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîé–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîé", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ '
                                                         '—Å–ª–µ–¥—É—é—â–∏–π '
                                                         '–¥–∏–∞–ª–æ–≥ü§ñ',
                                        reply_markup=main_menu())
                elif message.text == '–ú–µ–Ω—é':
                    client.send_message(message.chat.id, 'ü§ñ ¬∑¬∑¬∑–ú–ï–ù–Æ¬∑¬∑¬∑ ü§ñ\n'
                                                         '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –í–∞–º):\n'
                                                         f'–ò–º—è: {message.from_user.first_name}\n'
                                                         f'–ü–æ–ª: {db.get_gender(message.chat.id, True)}\n'
                                                         f'–†–µ–π—Ç–∏–Ω–≥: {db.get_rating(message.chat.id)[0]:.4f}\n'
                                                         f'/help - –ø–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ ü§ñ',
                                        reply_markup=next_dialog())

                elif message.text == '–ü–∞—Ä–µ–Ω—åüôç‚Äç‚ôÇ':
                    if db.get_rating(message.chat.id)[0] < 500:
                        client.send_message(message.chat.id, f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                                                             f"–°–µ–π—á–∞—Å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                                             f"{db.get_rating(message.chat.id)[0]:.4f}!\n"
                                                             f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–∫–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç 500, "
                                                             f"–í–∞–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è 200 —Ä–µ–π—Ç–∏–Ω–≥–∞ ü§ñ")
                    else:
                        user_info = db.get_gender_chat('male')
                        chat_two = user_info[0]
                        if db.create_chat(message.chat.id, chat_two) is False:
                            db.add_queue(message.chat.id, db.get_gender(message.chat.id))
                            client.send_message(message.chat.id, 'üîé–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîé ü§ñ', reply_markup=stop_search())
                        else:
                            mess = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ /stop ü§ñ'

                            client.send_message(message.chat.id, mess, reply_markup=stop_dialog())
                            client.send_message(chat_two, mess, reply_markup=stop_dialog())
                            rating[str(message.chat.id)] = 0
                            rating[str(chat_two)] = 0
                            last_dialogs[str(message.chat.id)] = str(chat_two)
                            last_dialogs[str(chat_two)] = str(message.chat.id)

                elif message.text == '–î–µ–≤—É—à–∫–∞üôç‚Äç‚ôÄ':
                    if db.get_rating(message.chat.id)[0] < 500:
                        client.send_message(message.chat.id, f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                                                             f"–°–µ–π—á–∞—Å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                                             f"{db.get_rating(message.chat.id)[0]:.4f}!\n"
                                                             f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–∫–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç 500, "
                                                             f"–í–∞–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è 200 —Ä–µ–π—Ç–∏–Ω–≥–∞ ü§ñ")
                    else:
                        user_info = db.get_gender_chat('female')
                        chat_two = user_info[0]
                        if db.create_chat(message.chat.id, chat_two) is False:
                            db.add_queue(message.chat.id, db.get_gender(message.chat.id))
                            client.send_message(message.chat.id, 'üîé–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîé ü§ñ', reply_markup=stop_search())
                        else:
                            mess = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ /stop ü§ñ'

                            client.send_message(message.chat.id, mess, reply_markup=stop_dialog())
                            client.send_message(chat_two, mess, reply_markup=stop_dialog())
                            rating[str(message.chat.id)] = 0
                            rating[str(chat_two)] = 0
                            last_dialogs[str(message.chat.id)] = str(chat_two)
                            last_dialogs[str(chat_two)] = str(message.chat.id)

                elif message.text == '–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Öüé≤':
                    if db.get_rating(message.chat.id)[0] < 500:
                        client.send_message(message.chat.id, f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
                                                             f"–°–µ–π—á–∞—Å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç "
                                                             f"{db.get_rating(message.chat.id)[0]:.4f}!\n"
                                                             f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ–∫–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç 500, "
                                                             f"–í–∞–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è 200 —Ä–µ–π—Ç–∏–Ω–≥–∞.ü§ñ")
                    else:
                        user_info = db.get_chat()
                        chat_two = user_info[0]
                        if db.create_chat(message.chat.id, chat_two) is False:
                            db.add_queue(message.chat.id, db.get_gender(message.chat.id))
                            client.send_message(message.chat.id, 'üîé–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîéü§ñ', reply_markup=stop_search())
                        else:
                            mess = '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ /stop'

                            client.send_message(message.chat.id, mess, reply_markup=stop_dialog())
                            client.send_message(chat_two, mess, reply_markup=stop_dialog())
                            rating[str(message.chat.id)] = 0
                            rating[str(chat_two)] = 0
                            last_dialogs[str(message.chat.id)] = str(chat_two)
                            last_dialogs[str(chat_two)] = str(message.chat.id)
            else:
                if message.text == '–°–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
                    chat_info = db.get_active_chat(message.chat.id)
                    if message.from_user.username and chat_info is not False:
                        client.send_message(chat_info[1], '@' + message.from_user.username)
                        client.send_message(message.chat.id, '–í—ã —Å–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
                                            reply_markup=stop_dialog_when_say())
                    else:
                        client.send_message(message.chat.id, '–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ —É–∫–∞–∑–∞–Ω username')
                else:
                    if "ü§ñ" in message.text or message.chat.id in []:  # –∞–¥–º–∏–Ω—ã > –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏
                        client.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \"ü§ñ\" –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
                    else:
                        if chat_info is not False:
                            chat_info = db.get_active_chat(message.chat.id)
                            client.send_message(chat_info[1], message.text)
                            try:
                                toxicity = GetToxicity(message.text, models=models_, vectorizers=vectorizers_)[1]
                                toxicity_score = 70 - (toxicity * 100) if toxicity < 0.6 else 40 - (toxicity * 100)
                                rating[str(message.chat.id)] += toxicity_score
                            except LangDetectException:
                                pass
                            except KeyError:
                                pass

    month = int(datetime.today().strftime('%m'))
    day = int(datetime.today().strftime('%d'))
    if not os.path.exists("last_save.json"):
        with open('last_save.json', 'w+') as outfile:
            json.dump({
                "day": day,
                "month": month,
            }, outfile)
    else:
        with open("last_save.json", "r") as f:
            data = json.loads(f.read())
            day_json = data["day"]
            month_json = data["month"]
        if (day > day_json and month == month_json) or \
                (day < day_json and month > month_json) or \
                (month == 1 and day == 1 and day < day_json):
            db.add_rating()
            with open('last_save.json', 'w+') as outfile:
                json.dump({
                    "day": day,
                    "month": month,
                }, outfile)


@ignore_exceptions
@client.message_handler(content_types=['sticker'])
def bot_stickers(message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info is not False:
            client.send_sticker(chat_info[1], message.sticker.file_id)
        else:
            client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ')


@ignore_exceptions
@client.message_handler(content_types=['voice'])
def bot_voice(message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info is not False:
            client.send_voice(chat_info[1], message.voice.file_id)
        else:
            client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ')


@ignore_exceptions
@client.message_handler(content_types=['document'])
def bot_document(message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info is not False:
            client.send_document(chat_info[1], message.document.file_id)
        else:
            client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ')


@ignore_exceptions
@client.message_handler(content_types=['video'])
def bot_video(message):
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        if chat_info is not False:
            client.send_video(chat_info[1], message.video.file_id)
        else:
            client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ')


@ignore_exceptions
@client.message_handler(content_types=['photo'])
def bot_photo(message):
    with lock:
        if message.chat.type == 'private':
            chat_info = db.get_active_chat(message.chat.id)
            if chat_info is not False:
                client.send_photo(chat_info[1], message.photo[0].file_id)
                print(message)
            else:
                client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ')


@ignore_exceptions
@client.message_handler(content_types=['video_note'])
def bot_video_note(message):
    with lock:
        if message.chat.type == 'private':
            chat_info = db.get_active_chat(message.chat.id)
            if chat_info is not False:
                client.send_video_note(chat_info[1], message.video_note.file_id)
            else:
                client.send_message(message.chat.id, '‚õî–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥! –ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è! ü§ñ')


@ignore_exceptions
@client.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data != "search":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', callback_data='search'))
        client.edit_message_text(chat_id=call.from_user.id, message_id=call.message.id, text="–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                                 reply_markup=markup)
        db.add_report(call.data, int(last_dialogs[str(call.from_user.id)]))
    else:
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup2.add(types.KeyboardButton('–ü–∞—Ä–µ–Ω—åüôç‚Äç‚ôÇ'), types.KeyboardButton('–î–µ–≤—É—à–∫–∞üôç‚Äç‚ôÄ'),
                    types.KeyboardButton('–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Öüé≤'))

        client.send_message(call.from_user.id, '–ö–æ–≥–æ –∏—Å–∫–∞—Ç—å? ü§ñ', reply_markup=markup2)
    client.answer_callback_query(callback_query_id=call.id)


if __name__ == "__main__":
    client.polling(non_stop=True, interval=0, skip_pending=True)
